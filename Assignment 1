#include <iostream>
using namespace std;

class Node {
public:
    int value;
    Node* left;
    Node* right;

    Node() {
        value = 0;
        left = NULL;
        right = NULL;
    }

    Node(int val) {
        value = val;
        left = NULL;
        right = NULL;
    }
};

Node* insert(Node* node, int value) {
    if (node == NULL) return new Node(value);
    if (node->value == value) return node; 
    if (node->value < value)
        node->right = insert(node->right, value);
    else
        node->left = insert(node->left, value);
    return node;
}


void inorder(Node* p) {
    if (p == NULL) return;
    inorder(p->left);
    cout << p->value << " ";
    inorder(p->right);
}

void preorder(Node* p) {
    if (p == NULL) return;
    cout << p->value << " ";
    preorder(p->left);
    preorder(p->right);
}

void postorder(Node* p) {
    if (p == NULL) return;
    postorder(p->left);
    postorder(p->right);
    cout << p->value << " ";
}

Node* search(Node* root, int key) {
    if (root == NULL || root->value == key) return root;
    if (root->value < key)
        return search(root->right, key);
    return search(root->left, key);
}
Node*deletenode(Node*root,int value){
     if(root==NULL) return root;

     if(value<root->value){
          root->left=deletenode(root->left,value);
     }
     else if(value>root->value){
          root->right=deletenode(root->right,value);
     }
     else{
            
            if(root->left == NULL){
                Node*temp = root->right;
                delete root;
                return temp;
            }
            else if(root->right == NULL){
                Node*temp = root->left;
                delete root;
                return temp;
            }
           }
        return root;

}


int main() {
    
    Node*root=NULL;
    int choice, value;

    do {
        cout << "--Menu Driven--" << endl;
        cout << "1. Insert a node" << endl;
        cout << "2. Inorder Traversal" << endl;
        cout << "3. Preorder Traversal" << endl;
        cout << "4. Postorder Traversal" << endl;
        cout << "5. Search a number" << endl;
        cout << "6. Delete a node" << endl;
        cout << "7. Exit" << endl;
        cout << "Enter your choice: ";
        cin >> choice;

        switch (choice) {
            case 1:
                cout << "Insert a value: ";
                cin >> value;
                root = insert(root, value); 
                break;

            case 2:
                cout << "Inorder traversal: ";
                inorder(root);
                cout << endl;
                break;

            case 3:
                cout << "Preorder traversal: ";
                preorder(root);
                cout << endl;
                break;

            case 4:
                cout << "Postorder traversal: ";
                postorder(root);
                cout << endl;
                break;

            case 5:
                cout << "Enter the value you want to search: ";
                cin >> value;
                if (search(root, value)) {
                    cout << value << " Found." << endl;
                } else {
                    cout << value << " Not Found." << endl;
                }
                break;
            
            case 6:
              
                cout<< "Enter the value you want to delete:";
                cin >> value;
                deletenode(root,value);
                break;

            case 7:
                cout << "Program Exit" << endl;
                break;

            default:
                cout << "Invalid option, try again." << endl;
                break; 
        }
    } while (choice != 7);

    return 0; 
}
